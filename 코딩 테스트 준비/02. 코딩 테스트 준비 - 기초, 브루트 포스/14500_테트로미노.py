# 백준 문제 14500: 테트로미노

# 표준 입력을 사용하기 위한 sys 모듈 임포트
import sys
input = sys.stdin.read

# 입력 데이터를 한 번에 읽어오기
data = input().split()

# 첫 번째 입력 값은 행의 수 N
N = int(data[0])
# 두 번째 입력 값은 열의 수 M
M = int(data[1])

# 이후의 값들은 맵의 각 위치에 해당하는 값들로, 2차원 배열로 변환
grid = []
index = 2  # N과 M 이후의 값부터 맵 데이터가 시작됨
for i in range(N):
    row = []
    for j in range(M):
        row.append(int(data[index]))
        index += 1
    grid.append(row)

# 테트로미노의 모든 가능한 모양을 정의
tetrominoes = [
    # 'I' 모양
    [(0, 0), (0, 1), (0, 2), (0, 3)],
    [(0, 0), (1, 0), (2, 0), (3, 0)],
    # 'O' 모양
    [(0, 0), (0, 1), (1, 0), (1, 1)],
    # 'T' 모양
    [(0, 0), (0, 1), (0, 2), (1, 1)],
    [(1, 0), (0, 1), (1, 1), (2, 1)],
    [(1, 0), (0, 1), (1, 1), (1, 2)],
    [(0, 0), (1, 0), (1, 1), (2, 0)],
    # 'S' 모양
    [(0, 1), (1, 0), (1, 1), (2, 0)],
    [(0, 0), (0, 1), (1, 1), (1, 2)],
    # 'Z' 모양
    [(0, 0), (1, 0), (1, 1), (2, 1)],
    [(1, 0), (0, 1), (1, 1), (0, 2)],
    # 'J' 모양
    [(0, 0), (1, 0), (2, 0), (2, 1)],
    [(1, 0), (0, 1), (1, 1), (1, 2)],
    [(0, 0), (0, 1), (1, 1), (2, 1)],
    [(0, 0), (0, 1), (1, 0), (2, 0)],
    # 'L' 모양
    [(0, 0), (1, 0), (2, 0), (0, 1)],
    [(0, 0), (0, 1), (0, 2), (1, 0)],
    [(0, 0), (0, 1), (1, 1), (2, 1)],
    [(0, 0), (0, 1), (1, 1), (1, 2)]
]

# 최대 합을 저장할 변수 초기화
max_sum = 0

# 맵의 각 위치에서 테트로미노를 배치해보는 과정
for i in range(N):
    for j in range(M):
        # 각 테트로미노 모양에 대해
        for shape in tetrominoes:
            current_sum = 0  # 현재 테트로미노 모양의 합을 저장할 변수 초기화
            valid = True  # 테트로미노 모양이 맵 안에 완전히 들어가는지 확인하기 위한 변수
            for dx, dy in shape:
                # 테트로미노의 각 블록이 맵 내에 있는지 확인
                if 0 <= i + dx < N and 0 <= j + dy < M:
                    current_sum += grid[i + dx][j + dy]  # 범위 내에 있다면 해당 위치의 값을 합산
                else:
                    valid = False  # 범위 밖으로 나가면 무효로 설정
                    break
            if valid:
                # 현재 테트로미노 모양의 합이 기존 최대 값보다 크면 갱신
                max_sum = max(max_sum, current_sum)

# 결과 출력
print(max_sum)
